#include <iostream>
#include <string>
#include <cstdint>
#include <vector>
#include <sstream>
#include <iomanip>
#include <fstream>

// Function to rotate a value right by a given count
uint32_t rotateRight(uint32_t value, uint32_t count) {
    return (value >> count) | (value << (32 - count));
}

// SHA256 hash function
std::string sha256(const std::string str) {
    // Initialise hash values
    uint32_t hash[8] = {
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    };

    // Constants for SHA256
    uint32_t constants[64] = {
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
        0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
        0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
        0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
        0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
        0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
        0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
        0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
        0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    };

    // Convert input string to bytes
    const uint8_t *data = reinterpret_cast<const uint8_t *>(str.c_str());
    size_t length = str.size();

    std::vector<uint8_t> messageData(length);
    std::copy(data, data + length, messageData.begin());

    messageData.push_back(0x80); // Append a 1 bit

    // Pad the message with zeros until the length is a multiple of 512 bits
    while ((messageData.size() * 8) % 512 != 448) {
        messageData.push_back(0x00);
    }

    // Append the original message length (64-bit)
    messageData.resize(messageData.size() + 8);
    uint64_t bitLength = length * 8;
    for (int i = 0; i < 8; i++) {
        messageData[messageData.size() - 8 + i] = (bitLength >> (56 - i * 8)) & 0xff;
    }

    // Process the message in 512-bit blocks
    for (size_t blockIndex = 0; blockIndex < messageData.size(); blockIndex += 64) {
        std::vector<uint32_t> words(64);

        // Divide each block into 16 words (32 bits each)
        for (size_t i = 0; i < 16; i++) {
            words[i] = (messageData[blockIndex + i * 4] << 24) |
                       (messageData[blockIndex + i * 4 + 1] << 16) |
                       (messageData[blockIndex + i * 4 + 2] << 8) |
                       (messageData[blockIndex + i * 4 + 3]);
        }

        // Extend the first 16 words into the remaining 48 words
        for (size_t i = 16; i < 64; i++) {
            uint32_t s0 = (rotateRight(words[i - 15], 7) ^
                           rotateRight(words[i - 15], 18) ^
                           (words[i - 15] >> 3));
            uint32_t s1 = (rotateRight(words[i - 2], 17) ^
                           rotateRight(words[i - 2], 19) ^
                           (words[i - 2] >> 10));
            words[i] = words[i - 16] + s0 + words[i - 7] + s1;
        }

        // Initialise temporary variables
        uint32_t a = hash[0];
        uint32_t b = hash[1];
        uint32_t c = hash[2];
        uint32_t d = hash[3];
        uint32_t e = hash[4];
        uint32_t f = hash[5];
        uint32_t g = hash[6];
        uint32_t h = hash[7];

        // Perform the main hash computation
        for (size_t i = 0; i < 64; i++) {
            uint32_t S1 = rotateRight(e, 6) ^ rotateRight(e, 11) ^ rotateRight(e, 25);
            uint32_t ch = (e & f) ^ (~e & g);
            uint32_t temp1 = h + S1 + ch + constants[i] + words[i];
            uint32_t S0 = rotateRight(a, 2) ^ rotateRight(a, 13) ^ rotateRight(a, 22);
            uint32_t maj = (a & b) ^ (a & c) ^ (b & c);
            uint32_t temp2 = S0 + maj;

            h = g;
            g = f;
            f = e;
            e = d + temp1;
            d = c;
            c = b;
            b = a;
            a = temp1 + temp2;
        }

        // Update the hash values with the current block's result
        hash[0] += a;
        hash[1] += b;
        hash[2] += c;
        hash[3] += d;
        hash[4] += e;
        hash[5] += f;
        hash[6] += g;
        hash[7] += h;
    }

    // Convert the binary hash value to a hex string
    std::ostringstream oss;
    oss << std::hex << std::setfill('0');
    for (int i = 0; i < 8; i++) {
        oss << std::setw(8) << hash[i];
    }

    // Output the hash value
    return oss.str();
}