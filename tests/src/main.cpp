#include <filesystem>
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <random>
#include <cmath>
#include <algorithm>
#include <numeric>
#include <unordered_set>
#include <unordered_map>
#include <ctime>
#include <map>
#include <set>

#include <data.hpp>
#include <crypt.hpp>
#include <model.hpp>


double trainRandomForestModel(bool verbose = false) {
    std::vector<std::vector<double>> benignFeatures, malwareFeatures, allFeatures, trainFeatures, testFeatures;
    std::vector<int> benignLabels, malwareLabels, allLabels, trainLabels, testLabels;
    std::vector<std::string> benignHeaders, malwareHeaders, allHeaders;

    // Load data from CSV file
    if (!loadCSV("./inc/benign_data.csv", benignFeatures, benignLabels, benignHeaders)) {
        std::cerr << "Failed to load CSV file!" << std::endl;
        return 0;
    }

    // Load data from CSV file
    if (!loadCSV("./inc/malware_data.csv", malwareFeatures, malwareLabels, malwareHeaders)) {
        std::cerr << "Failed to load CSV file!" << std::endl;
        return 0;
    }

    int dataPoints = -1;

    // Merge benign and malware data
    if (dataPoints != -1) {
        allFeatures.insert(allFeatures.end(), benignFeatures.begin(), benignFeatures.begin() + dataPoints);
        allFeatures.insert(allFeatures.end(), malwareFeatures.begin(), malwareFeatures.begin() + dataPoints);
        allLabels.insert(allLabels.end(), benignLabels.begin(), benignLabels.begin() + dataPoints);
        allLabels.insert(allLabels.end(), malwareLabels.begin(), malwareLabels.begin() + dataPoints);
        allHeaders = benignHeaders;
    } else {
        allFeatures.insert(allFeatures.end(), benignFeatures.begin(), benignFeatures.end());
        allFeatures.insert(allFeatures.end(), malwareFeatures.begin(), malwareFeatures.end());
        allLabels.insert(allLabels.end(), benignLabels.begin(), benignLabels.end());
        allLabels.insert(allLabels.end(), malwareLabels.begin(), malwareLabels.end());
        allHeaders = benignHeaders;
    }

    if (verbose) {
        std::cout << "Loaded " << benignFeatures.size() << " benign data points" << std::endl;
        std::cout << "Loaded " << malwareFeatures.size() << " malware data points" << std::endl;
        std::cout << "Loaded " << allFeatures.size() << " total data points" << std::endl;
    }

    // Split data into train and test sets
    trainTestSplit(allFeatures, allLabels, trainFeatures, trainLabels, testFeatures, testLabels);

    // Training features and labels MUST be sorted
    sortData(trainFeatures, trainLabels);

    clock_t begin = clock();

    RandomForest forest(10, 5, 1);
    forest.train(trainFeatures, trainLabels);

    clock_t end = clock();
    double elapsed_ms = double(end - begin) / CLOCKS_PER_SEC * 1000.0;

    if (verbose) {
        std::cout << "Training completed in " << elapsed_ms << " ms" << std::endl;
    }

    // Evaluate the accuracy of the model
    double accuracy = forest.calculateAccuracy(testFeatures, testLabels);

    if (verbose) {
        std::cout << "Estimated accuracy: " << accuracy << std::endl;
    }

    // Save the model to a file
    forest.saveModel("./inc/model.bin");

    if (verbose) {
        std::cout << "Model saved successfully" << std::endl;
    }

    return accuracy;
}

int main() {

    // Train the model to ./inc/model.bin
    // double accuracy = trainRandomForestModel(true);
    double accuracy = 0.89;

    std::cout << "Model trained successfully" << std::endl;
    std::cout << "Estimated accuracy: " << accuracy << std::endl;

    // Load the model from ./inc/model.bin
    RandomForest forest("./inc/model.bin");

    // Get features from a single file
    std::vector<std::string> headers;
    std::vector<double> features;

    std::string filePath = "./inc/m.exe";

    fileAttr(filePath, headers, features);

    // Evaluate the accuracy of the model
    double predictedLabel = forest.predict(features);
    std::cout << "Prediction: " << predictedLabel << std::endl;

    return 0;
}
