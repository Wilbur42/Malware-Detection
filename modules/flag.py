import json
import pandas as pd
import numpy as np
from multiprocessing import Pool, Manager
import time
import sys

class Flag:

    def __init__(self, benign_df, malware_df):
        self.benign_df = benign_df
        self.malware_df = malware_df
        self.combined_df = pd.concat([benign_df, malware_df])
        self.attrs = None

        self.progress = None
        self.start_time = None

    def set_occourances(self, occourances):
        self.attrs = occourances

    # Function to process each column
    def process_column(self, args):
        col, progress = args
        attr = {}

        benign_value_counts = self.benign_df[col].value_counts()
        malware_value_counts = self.malware_df[col].value_counts()

        for val in self.combined_df[col].unique():
            benign_count = int(benign_value_counts.get(val, 0))
            malware_count = int(malware_value_counts.get(val, 0))
            total_count = benign_count + malware_count
            attr[str(val)] = [benign_count, malware_count, total_count]

        progress.value += 1
        self._print_progress(progress)

        return attr

    def get_occourance(self):
        self.progress = Manager().Value('i', 0)  # Shared progress value
        self.start_time = time.time()  # Start time
        self._print_progress(self.progress)  # Print initial progress

        with Pool(processes=60) as p:
            results = p.map(self.process_column, list([col, self.progress] for col in self.combined_df.columns))

        # Combine the results into a single dictionary
        attrs = {col: attr for col, attr in zip(self.combined_df.columns, results)}

        self._print_progress(self.progress)

        return attrs

    def create_rules(self):
        if self.attrs is None:
            self.attrs = self.get_occourance()

        classified_attrs = {}

        for col in attrs:
            classified_values = []
            for val in attrs[col]:
                benign_count, malware_count, total_counts = attrs[col][val]
                benign_percentage = benign_count / total_counts
                malware_percentage = malware_count / total_counts

                if total_counts > 100:
                    if malware_percentage > malware_threshold and benign_percentage < benign_threshold:
                        classification = 'Malware'
                        classified_values.append((val, attrs[col][val] + [classification, True]))
                else:
                    classification = 'Unclassified'
                    classified_values.append((val, attrs[col][val] + [classification, False]))
            if classified_values:
                classified_attrs[col] = dict(classified_values)

        return classified_attrs

    def _format_time(self, seconds):
        minutes = seconds // 60
        hours = minutes // 60

        if hours > 0:
            return f'{hours}h {minutes % 60}m {seconds % 60}s'
        if minutes > 0:
            return f'{minutes}m {seconds % 60}s'
        return f'{seconds}s'

    # Print the progress of the training
    def _print_progress(self, progress):
        progress_percentage = (progress.value / len(self.combined_df.columns)) * 100
        progress_str = f'\rProgress: {progress.value}/{len(self.combined_df.columns)} cols ({progress_percentage:.2f}%)'

        if self.start_time is not None and progress.value > 0:
            total_time = time.time() - self.start_time
            time_per_tree = total_time / progress.value
            remaining_time = (len(self.combined_df.columns) - progress.value) * time_per_tree
            progress_str += f', Time taken: {self._format_time(int(total_time))}, Estimated time remaining: {self._format_time(int(remaining_time))}'

        # TODO: Update time remaining every 10 seconds or so (as well as every tree)
        # TODO: Add progress bar?
        print('\r' + ' ' * 100, flush=True, end='') # Clear previous line
        print(progress_str, flush=True, end='')  # Use print with end='' to overwrite previous line

if __name__ == '__main__':
    # Set the thresholds for the percentage present in malware and benign files
    malware_threshold = 0.5
    benign_threshold = 0.1

    print("Loading datasets...")
    # Load Datasets
    benign_df = pd.read_csv('./data/benign_data.csv').drop(['Name', 'Parent', 'Code', 'Malware'], axis=1)
    malware_df = pd.read_csv('./data/malware_data.csv').drop(['Name', 'Parent', 'Code', 'Malware'], axis=1)
    print("Datasets loaded.")

    # Concatenate the dataframes into one dataframe
    df = pd.concat([benign_df, malware_df], ignore_index=True)

    flag = Flag(benign_df, malware_df)

    # Get the occourance of each value in each column
    with open('./data/attrs.json', 'r', encoding='utf-8') as f:
        attrs = json.load(f)

    flag.set_occourances(attrs)

    print("Processing columns and values complete.")

    print("Classifying values...")
    classified_attrs = flag.create_rules()

    print("Classification complete.")