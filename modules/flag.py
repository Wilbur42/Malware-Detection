## Flag system discontinued due to lack of accuracy
# This will not be used in the final version of the program

import json
import pandas as pd
import numpy as np
from multiprocessing import Pool, Manager
import time
import sys

class Flag:
    def __init__(self, benign_df, malware_df):
        self.benign_df = benign_df
        self.malware_df = malware_df
        self.combined_df = pd.concat([benign_df, malware_df])
        self.attrs = None

    def set_occurrences(self, occurrences):
        self.attrs = occurrences

    def process_column(self, col):
        attr = {}

        benign_value_counts = self.benign_df[col].value_counts()
        malware_value_counts = self.malware_df[col].value_counts()

        for val in self.combined_df[col].unique():
            benign_count = benign_value_counts.get(val, 0)
            malware_count = malware_value_counts.get(val, 0)
            total_count = benign_count + malware_count
            attr[str(val)] = [benign_count, malware_count, total_count]

        return attr

    def get_occurrences(self):
        with Pool(processes=60) as p:
            results = p.map(self.process_column, self.combined_df.columns)

        return {col: attr for col, attr in zip(self.combined_df.columns, results)}

    def create_rules(self):
        if self.attrs is None:
            self.attrs = self.get_occurrences()

        classified_attrs = {}

        malware_threshold = 0.5
        benign_threshold = 0.5

        for col in self.attrs:
            classified_values = []
            for val in self.attrs[col]:
                benign_count, malware_count, total_counts = self.attrs[col][val]
                benign_percentage = benign_count / total_counts
                malware_percentage = malware_count / total_counts

                if total_counts > 100:
                    if malware_percentage > malware_threshold and benign_percentage < benign_threshold:
                        classification = 'Malware'
                        classified_values.append((val, self.attrs[col][val] + [classification, True]))
                else:
                    classification = 'Unclassified'
                    classified_values.append((val, self.attrs[col][val] + [classification, False]))
            if classified_values:
                classified_attrs[col] = dict(classified_values)

        return classified_attrs

if __name__ == '__main__':
    # Set the thresholds for the percentage present in malware and benign files
    malware_threshold = 0.5
    benign_threshold = 0.1

    print("Loading datasets...")
    # Load Datasets
    benign_df = pd.read_csv('./data/benign_data.csv').drop(['Name', 'Parent', 'Code', 'Malware'], axis=1)
    malware_df = pd.read_csv('./data/malware_data.csv').drop(['Name', 'Parent', 'Code', 'Malware'], axis=1)
    print("Datasets loaded.")

    # Concatenate the dataframes into one dataframe
    df = pd.concat([benign_df, malware_df], ignore_index=True)

    flag = Flag(benign_df, malware_df)

    # Get the occourance of each value in each column
    with open('./data/attrs.json', 'r', encoding='utf-8') as f:
        attrs = json.load(f)

    flag.set_occourances(attrs)

    print("Processing columns and values complete.")

    print("Classifying values...")
    classified_attrs = flag.create_rules()

    print("Classification complete.")