#include <filesystem>
#include <iostream>
#include <vector>
#include <string>
#include <ctime>

#include <data.hpp>
#include <model.hpp>

void trainRandomForestModel(bool verbose = false) {
    std::vector<std::vector<double>> allFeatures, trainFeatures, testFeatures;
    std::vector<int> allLabels, trainLabels, testLabels;
    std::vector<std::string> allHeaders;

    // Load data from CSV file
    for (auto& csvPath : std::filesystem::directory_iterator("./inc/malware")) {
        if (!loadCSV(csvPath.path().string(), allFeatures, allLabels, allHeaders)) {
            std::cerr << "Failed to load CSV file!" << std::endl;
            return;
        }
    }

    if (verbose) {
        std::cout << "Loaded " << allFeatures.size() << " total data points" << std::endl;
    }

    // Split data into train and test sets
    trainTestSplit(allFeatures, allLabels, trainFeatures, trainLabels, testFeatures, testLabels);

    // Training features and labels MUST be sorted
    sortData(trainFeatures, trainLabels);

    clock_t begin = clock();

    RandomForest forest(10, 5, 1);
    forest.train(trainFeatures, trainLabels);

    clock_t end = clock();
    double elapsed_ms = double(end - begin) / CLOCKS_PER_SEC * 1000.0;

    if (verbose) {
        std::cout << "Training completed in " << elapsed_ms << " ms" << std::endl;
    }

    // Evaluate the accuracy of the model
    double accuracy = forest.calculateAccuracy(testFeatures, testLabels);

    if (verbose) {
        std::cout << "Estimated accuracy: " << accuracy << std::endl;
    }

    // Save the model to a file
    forest.saveModel("./inc/model.bin");

    if (verbose) {
        std::cout << "Model saved successfully" << std::endl;
    }
}

// TODO: Consider arranging args into a struct or map for easier access and extendability
void helpOutput(std::string program) {
    int width = 40;

    std::cout << "Usage: " << program << " [options]" << std::endl;
    std::cout << "Options:" << std::endl;
    std::cout << std::left << std::setw(width) << "  -h, -help" << "Display this help message" << std::endl;
    std::cout << std::left << std::setw(width) << "  -v, -verbose" << "Enable verbose output" << std::endl;
    std::cout << std::left << std::setw(width) << "  -t, -train" << "Train the model" << std::endl;
    std::cout << std::left << std::setw(width) << "  -p, -predict <file>" << "Predict the label of a file" << std::endl;
}

int main(int argCount, char* args[]) {

    // User interaction
    // Command line argument testing below

    // Initialise variables
    std::string program = args[0];

    bool verbose = false;
    bool train = false;
    bool predictFile = false;
    std::string filePathToPredict;

    // Check arguments

    if (argCount == 1) {
        helpOutput(program);
        return 0;
    }

    // Loop through all arguments
    for (int i = 0; i < argCount; i++) {
        std::string arg = args[i];

        // Check for help flag
        if (arg == "-h" || arg == "-help") {
            helpOutput(program);
            break;
        }

        // Check for verbose flag
        if (arg == "-v" || arg == "-verbose") {
            verbose = true;
            continue;
        }

        // Check for train flag
        if (arg == "-t" || arg == "-train") {
            train = true;
            continue;
        }

        // Check for predict flag
        if (arg == "-p" || arg == "-predict") {
            filePathToPredict = args[i + 1];
            if (std::filesystem::is_regular_file(filePathToPredict)) {
                predictFile = true;
            }
            continue;
        }
    }


    // Main program logic

    // Train the model to ./inc/model.bin
    if (train) {
        trainRandomForestModel(verbose);
    }

    // Load the model from ./inc/model.bin
    if (predictFile) {
        RandomForest forest("./inc/model.bin");

        // Get features from a single file
        std::vector<std::string> headers;
        std::vector<double> features;

        fileAttr(filePathToPredict, headers, features);

        // Evaluate the accuracy of the model
        double predictedLabel = forest.predict(features);
        std::cout << "Prediction: " << predictedLabel << std::endl;
    }

    // TODO: Generate a report of the file's features

    return 0;
}